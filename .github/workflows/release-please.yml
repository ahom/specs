on:
  push:
    branches:
      - master
name: release-please
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v2
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          package-name: toaztr-specs
      # The logic below handles the npm publication:
      - uses: actions/checkout@v2
        # these if statements ensure that a publication only occurs when
        # a new release is created:
        if: ${{ steps.release.outputs.release_created }}
      - uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: 'https://registry.npmjs.org'
        if: ${{ steps.release.outputs.release_created }}
      - uses: actions/cache@v2.1.5
        if: ${{ steps.release.outputs.release_created }}
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('deploy/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}- 
      - run: npm ci
        if: ${{ steps.release.outputs.release_created }}
      - run: npx openapi bundle reference/*.yaml -o dist/toaztr
        if: ${{ steps.release.outputs.release_created }}
      - run: cp dist/toaztr.yaml pkg/npm/
        if: ${{ steps.release.outputs.release_created }}
      - run: npm version ${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }} && npm publish --access public
        if: ${{ steps.release.outputs.release_created }}
        working-directory: ./pkg/npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: cp dist/toaztr.yaml pkg/pypi/src/toaztr_specs/
        if: ${{ steps.release.outputs.release_created }}
      - uses: actions/setup-python@v2
        if: ${{ steps.release.outputs.release_created }}
        with:
          python-version: '3.8'
      - run: python -m pip install build twine --user
        if: ${{ steps.release.outputs.release_created }}
        working-directory: ./pkg/pypi
      - run: python -m build --sdist --wheel --outdir dist/
        if: ${{ steps.release.outputs.release_created }}
        working-directory: ./pkg/pypi
        env:
          PACKAGE_VERSION: ${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}
      - run: python -m twine upload dist/*
        if: ${{ steps.release.outputs.release_created }}
        working-directory: ./pkg/pypi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
