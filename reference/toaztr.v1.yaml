openapi: 3.0.3
tags:
  - name: Cases
    description: Relatif aux dossiers
  - name: Simulations
    description: Relatif aux simulations
  - name: Compute
    description: Utilitaires
  - name: Score
    description: Relatif au scoring
  - name: Partners
    description: Relatif aux partenaires
  - name: PlanParameters
    description: Relatif aux parametres de plan de financement
info:
  contact:
    name: API Support
  description: Documentation des API Toaztr
  title: Toaztr API
  version: 1.0.0
  x-logo:
    altText: Toaztr logo
    url: 'https://www.toaztr.com/assets/toaztr_logo.png'
components:
  securitySchemes:
    OAuth:
      type: oauth2
      description: Cette API utilise le framework d'authorisation OAuth2
      flows:
        clientCredentials:
          tokenUrl: 'https://auth.toaztr.com/oauth2/token'
          scopes:
            cases/read: Acces en lecture aux dossiers
            cases/write: Acces en ecriture aux dossiers
            cases/*: Acces complet aux dossiers
            simulations/budget: Acces aux simulations de budget
            simulations/funding: Acces aux simulations de financement
            simulations/debt_consolidation: Acces aux simulations de consolidation de dette
            simulations/pinel: Acces aux simulations pinel
            simulations/*: Acces a toutes les simulations
            scores/*: Acces au scoring
        authorizationCode:
          authorizationUrl: 'https://auth.toaztr.com/oauth2/authorize'
          tokenUrl: 'https://auth.toaztr.com/oauth2/token'
          scopes:
            cases/read: Acces en lecture aux dossiers
            cases/write: Acces en ecriture aux dossiers
            cases/*: Acces complet aux dossiers
            simulations/budget: Acces aux simulations de budget
            simulations/funding: Acces aux simulations de financement
            simulations/debt_consolidation: Acces aux simulations de consolidation de dette
            simulations/pinel: Acces aux simulations pinel
            simulations/*: Acces a toutes les simulations
            scores/*: Acces au scoring
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '403':
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: ID unique de la resource
    caseId:
      name: caseId
      in: path
      required: true
      schema:
        type: string
      description: ID du dossier parent
    planId:
      name: planId
      in: path
      required: true
      schema:
        type: string
      description: ID des parametres du plan de financement parent
    IfMatch:
      name: If-Match
      in: header
      required: false
      schema:
        type: string
      description: Entity tag de la resource
    'page[size]':
      name: 'page[size]'
      in: query
      required: false
      schema:
        type: number
        minimum: 0
        maximum: 20
        default: 10
      description: Taille de la page a retourner
    'page[after]':
      name: 'page[after]'
      in: query
      required: false
      schema:
        type: string
      description: Curseur a partir duquel la page debute 
    'page[before]':
      name: 'page[before]'
      in: query
      required: false
      schema:
        type: string
      description: Curseur a partir duquel la page debute 
  schemas:
    Resource:
      title: Resource
      type: object
      description: Resource identifiée uniquement par son type et son id
      properties:
        id:
          type: string
          description: ID unique de la resource
          readOnly: true
        type:
          type: string
          description: Type de la resource
        attributes:
          type: object
          description: Attributs de la resource
        meta:
          type: object
          description: Meta-données de la resourc
          properties:
            etag:
              type: string
              description: ETag de la resource
              readOnly: true
            created_at:
              type: string
              format: date-time
              description: Date de création de la resourc
              readOnly: true
            last_updated_at:
              type: string
              format: date-time
              description: Date de dernière update de la resourc
              readOnly: true
      required:
        - type
    CaseResource:
      title: CaseResource
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            type:
              type: string
              default: CASE
              enum:
                - CASE
            attributes:
              $ref: ../models/Case.v1.json
          required:
            - type
      description: Represente un dossier
    ErrorResponse:
      title: ErrorResponse
      type: object
      description: Represente une réponse en erreur
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
                description: Type d'erreur
              detail:
                type: string
                description: Détails de l'erreur
              source:
                type: object
                properties:
                  pointer:
                    type: string
                    description: JSON Pointer vers le field en erreur
                  parameter:
                    type: string
                    description: Nom du paramètre en erreur
                  header:
                    type: string
                    description: Nom du header en erreur
    PaginatedResponse:
      title: PaginatedResponse
      type: object
      description: Page de resources
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              meta:
                type: object
                properties:
                  page:
                    type: object
                    properties:
                      cursor:
                        type: string
                        description: Curseur pointant sur cet élément
        links:
          type: object
          properties:
            prev:
              type: string
              description: Lien vers la page précedente
            next:
              type: string
              description: Lien vers la prochaine page
    PartnerResource:
      title: PartnerResource
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            type:
              type: string
              default: v
              enum:
                - PARTNER
            attributes:
              $ref: ../models/Partner.v1.json
          required:
            - type
      description: Représente un partenaire
    PlanParametersResource:
      title: PlanParametersResource
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            type:
              type: string
              default: PLAN_PARAMETERS
              enum:
                - PLAN_PARAMETERS
            attributes:
              $ref: ../models/PlanParameters.v1.json
          required:
            - type
    SimulationResource:
      title: SimulationResource
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            type:
              type: string
              default: SIMULATION
              enum:
                - SIMULATION
            attributes:
              $ref: ../models/Simulation.v1.json
          required:
            - type
paths:
  '/v1/cases/{id}':
    delete:
      operationId: deleteCase
      tags:
        - Cases
      description: Supprime un dossier par ID
      parameters:
        - $ref: '#/components/parameters/IfMatch'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      summary: Supprime un dossier par ID
      security:
        - OAuth:
            - cases/write
    get:
      operationId: getCaseById
      tags:
        - Cases
      description: Retourne un dossier par ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CaseResource'
          headers:
            ETag:
              schema:
                type: string
              description: Entity tag of the resource
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      summary: Retourne des cases par ID
      security:
        - OAuth:
            - cases/read
    parameters:
      - $ref: '#/components/parameters/id'
    put:
      operationId: putCase
      tags:
        - Cases
      description: Mets a jour un case par ID
      parameters:
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Case.v1.json
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResource'
          description: OK
          headers:
            ETag:
              description: Entity tag of the resource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      summary: Mets a jour un cases par ID
      security:
        - OAuth:
            - cases/write
  /v1/cases:
    get:
      operationId: getCases
      tags:
        - Cases
      description: List cases
      parameters:
        - $ref: '#/components/parameters/page[size]'
        - $ref: '#/components/parameters/page[after]'
        - $ref: '#/components/parameters/page[before]'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/CaseResource'
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: List cases
      security:
        - OAuth:
            - cases/read
    post:
      operationId: postCase
      tags:
        - Cases
      description: Creer un case
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Case.v1.json
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CaseResource'
          description: OK
          headers:
            ETag:
              description: Entity tag of the resource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: Creates cases
      security:
        - OAuth:
            - cases/write
    parameters: []
  /v1/simulations/budget:
    post:
      operationId: postBudgetSimulation
      tags:
        - Simulations
      description: Simulates a budget
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/BudgetParameters.v1.json
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ../models/BudgetResults.v1.json
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: Creates budget simulations
      security:
        - OAuth:
            - simulations/budget
    parameters: []
  /v1/simulations/funding:
    post:
      operationId: postFundingSimulation
      tags:
        - Simulations
      description: Simulates a funding
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/FundingParameters.v1.json
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ../models/FundingResults.v1.json
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: Creates funding simulations
      security:
        - OAuth:
            - simulations/funding
    parameters: []
  /v1/simulations/pinel:
    post:
      operationId: postPinelSimulation
      tags:
        - Simulations
      description: Simulates pinel
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PinelParameters.v1.json
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ../models/PinelResults.v1.json
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: Creates pinel simulations
      security:
        - OAuth:
            - simulations/pinel
    parameters: []
  /v1/simulations/debt_consolidation:
    post:
      operationId: postDebtConsolidationSimulation
      tags:
        - Simulations
      description: Simulates a debt consolidation
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/DebtConsolidationParameters.v1.json
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ../models/DebtConsolidationResults.v1.json
          description: OK
          headers: {}
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: Creates debt consolidation simulations
      security:
        - OAuth:
            - simulations/debt_consolidation
    parameters: []
  /v1/scores:
    post:
      operationId: postScore
      tags:
        - Score
      description: Scores a case
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Case.v1.json
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ../models/Score.v1.json
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: Compute score and rate on a case
      security:
        - OAuth:
            - scores/*
    parameters: []
  '/v1/partners/{id}':
    delete:
      operationId: deletePartner
      tags:
        - Partners
      description: Supprime un a partner par ID
      parameters:
        - $ref: '#/components/parameters/IfMatch'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      summary: Supprime un partners par ID
      security:
        - OAuth:
            - cases/write
    get:
      operationId: getPartnerById
      tags:
        - Partners
      description: Retourne un partner par ID
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PartnerResource'
          description: OK
          headers:
            ETag:
              description: Entity tag of the resource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      summary: Retourne des partners par ID
      security:
        - OAuth:
            - cases/read
    parameters:
      - $ref: '#/components/parameters/id'
    put:
      operationId: putPartner
      tags:
        - Partners
      description: Mets a jour un partner par ID
      parameters:
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Partner.v1.json
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PartnerResource'
          description: OK
          headers:
            ETag:
              description: Entity tag of the resource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      summary: Mets a jour un partners par ID
      security:
        - OAuth:
            - cases/write
  /v1/partners:
    get:
      operationId: getPartners
      tags:
        - Partners
      description: List partners
      parameters:
        - $ref: '#/components/parameters/page[size]'
        - $ref: '#/components/parameters/page[after]'
        - $ref: '#/components/parameters/page[before]'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/PartnerResource'
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: List partners
      security:
        - OAuth:
            - cases/read
    post:
      operationId: postPartner
      tags:
        - Partners
      description: Creer un partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/Partner.v1.json
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PartnerResource'
          description: OK
          headers:
            ETag:
              description: Entity tag of the resource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: Creates partners
      security:
        - OAuth:
            - cases/write
    parameters: []
  /v1/compute/notary_fees:
    post:
      operationId: postNotaryFees
      tags:
        - Compute
      description: Computes notary fees
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/NotaryFeesParameters.v1.json
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: ../models/NotaryFees.v1.json
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: Compute notary fees
      security:
        - OAuth:
            - simulations/*
    parameters: []
  /v1/compute/income_tax:
    post:
      operationId: postIncomeTax
      tags:
        - Compute
      description: Calcule le montant d'impots
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/FrenchIncomeTaxParameters.v1.json
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: ../models/FrenchIncomeTax.v1.json
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: Computes income taxes
      security:
        - OAuth:
            - simulations/*
  '/v1/cases/{caseId}/plans-parameters/{id}':
    delete:
      operationId: deletePlansParameters
      description: Supprime un par ID
      parameters:
        - $ref: '#/components/parameters/IfMatch'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      summary: Supprime un plan par ID
      security:
        - OAuth:
            - cases/write
      tags:
        - Cases
    get:
      operationId: getPlansParametersById
      description: Retourne un plans-parameters par ID
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PlanParametersResource'
          description: OK
          headers:
            ETag:
              description: Entity tag of the resource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      summary: Retourne des plans-parameters par ID
      security:
        - OAuth:
            - cases/read
      tags:
        - Cases
    parameters:
      - $ref: '#/components/parameters/id'
      - $ref: '#/components/parameters/caseId'
    put:
      operationId: putPlansParameters
      description: Mets a jour un plans-parameters par ID
      parameters:
        - $ref: '#/components/parameters/IfMatch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PlanParameters.v1.json
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PlanParametersResource'
          description: OK
          headers:
            ETag:
              description: Entity tag of the resource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      summary: Mets a jour un plans-parameters par ID
      security:
        - OAuth:
            - cases/write
      tags:
        - Cases
  '/v1/cases/{caseId}/plans-parameters':
    parameters:
      - $ref: '#/components/parameters/caseId'
    post:
      operationId: postPlansParameters
      description: Creer un plans-parameters
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../models/PlanParameters.v1.json
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PlanParametersResource'
          description: OK
          headers:
            ETag:
              description: Entity tag of the resource
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      summary: Creates plans-parameters
      security:
        - OAuth:
            - cases/write
      tags:
        - Cases
    get:
      summary: List plans-parameters
      operationId: getPlansParameters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/PlanParametersResource'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      description: List plans parameters
      security:
        - OAuth:
            - cases/read
      parameters:
        - $ref: '#/components/parameters/page[size]'
        - $ref: '#/components/parameters/page[after]'
        - $ref: '#/components/parameters/page[before]'
      tags:
        - Cases
  '/v1/cases/{caseId}/plans-parameters/{planId}/simulations':
    parameters:
      - schema:
          type: string
        name: caseId
        in: path
        required: true
      - schema:
          type: string
        name: planId
        in: path
        required: true
    get:
      summary: List simulations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SimulationResource'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      operationId: getSimulations
      description: List simulations
      security:
        - OAuth:
            - cases/read
      parameters:
        - $ref: '#/components/parameters/page[size]'
        - $ref: '#/components/parameters/page[after]'
        - $ref: '#/components/parameters/page[before]'
      tags:
        - Cases
    post:
      summary: Creates simulations
      operationId: postSimulation
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SimulationResource'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      description: Creer une simulation pour ce dossier et ce plan
      parameters: []
      security:
        - OAuth:
            - cases/write
      tags:
        - Cases
  '/v1/cases/{caseId}/plans-parameters/{planId}/simulations/{id}':
    parameters:
      - $ref: '#/components/parameters/caseId'
      - $ref: '#/components/parameters/planId'
      - $ref: '#/components/parameters/id'
    get:
      summary: Retourne des simulations par ID
      tags:
        - Cases
      responses:
        '200':
          description: OK
          headers:
            ETag:
              schema:
                type: string
              description: Entity tag of the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SimulationResource'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: getSimulationById
      description: Retourne une simulation par ID
      security:
        - OAuth:
            - cases/read
    delete:
      summary: Supprime une simulation par ID
      operationId: deleteSimulation
      parameters:
        - $ref: '#/components/parameters/IfMatch'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      description: Supprime une simulation par ID
      security:
        - OAuth:
            - cases/write
      tags:
        - Cases
servers:
  - description: Production server
    url: 'https://api.toaztr.com'
